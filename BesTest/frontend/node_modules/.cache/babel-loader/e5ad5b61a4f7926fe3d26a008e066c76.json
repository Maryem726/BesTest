{"ast":null,"code":"import axios from 'axios';\nimport { SetAlert } from './Alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, CLEAR_PROFILE, LOGOUT } from './Types';\nimport setAuthToken from '../utils/setAuthToken';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = _ref => {\n  let {\n    firstname,\n    lastname,\n    email,\n    password,\n    typeuser,\n    adress,\n    RIB\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      firstname,\n      lastname,\n      email,\n      password,\n      typeuser,\n      adress,\n      RIB\n    });\n\n    try {\n      const res = await axios.post('/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(SetAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(SetAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout / Clear Profile\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/lenovo/Documents/GitHub/BesTest/BesTest/frontend/src/Actions/auth.js"],"names":["axios","SetAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","CLEAR_PROFILE","LOGOUT","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","firstname","lastname","email","password","typeuser","adress","RIB","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { SetAlert } from './Alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  CLEAR_PROFILE,\r\n  LOGOUT,\r\n\r\n} from './Types';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nexport const loadUser = () => async (dispatch) => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n  try {\r\n    const res = await axios.get('/auth');\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR,\r\n    });\r\n  }\r\n};\r\n\r\nexport const register = ({\r\n  firstname,\r\n    lastname,\r\n    email,\r\n    password,\r\n    typeuser,\r\n    adress,\r\n    RIB,\r\n   \r\n}) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({\r\n    firstname,\r\n    lastname,\r\n    email,\r\n    password,\r\n    typeuser,\r\n    adress,\r\n    RIB\r\n    \r\n  });\r\n\r\n  try {\r\n    const res = await axios.post('/users', body, config);\r\n\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(SetAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n    });\r\n  }\r\n};\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post('/auth', body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(SetAlert(error.msg, 'danger')));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\n// Logout / Clear Profile\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: CLEAR_PROFILE });\r\n  dispatch({ type: LOGOUT });\r\n};"]},"metadata":{},"sourceType":"module"}