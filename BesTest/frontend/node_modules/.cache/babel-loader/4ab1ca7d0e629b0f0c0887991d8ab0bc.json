{"ast":null,"code":"import axios from 'axios';\nimport { SetAlert } from './Alert';\nimport { GET_EXERCICES, GET_EXERCICE, GET_LESSONS, EXERCICE_ERROR, DELETE_EXERCICE, ADD_EXERCICE } from './Types'; // Get posts\n\nexport const GetExercices = () => async dispatch => {\n  try {\n    const res = await axios.get('/exercice/list');\n    dispatch({\n      type: GET_EXERCICES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: EXERCICE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const GetAllLessons = () => async dispatch => {\n  try {\n    const res = await axios.get('/exercice/lesson');\n    dispatch({\n      type: GET_LESSONS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: EXERCICE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // // Delete post\n// export const DeleteExercice = (id,idLesson) => async (dispatch) => {\n//   try {\n//     await axios.delete(/exercice/list/${id}/${idLesson});\n//     dispatch({\n//       type: DELETE_EXERCICE,\n//       payload: id,\n//     });\n//     dispatch(SetAlert('Exercice Removed', 'success'));\n//   } catch (err) {\n//     dispatch({\n//       type: EXERCICE_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status },\n//     });\n//   }\n// };\n// Add post\n\nexport const AddExercices = _ref => {\n  let {\n    formData,\n    user\n  } = _ref;\n  return async dispatch => {\n    try {\n      const res = await axios.post(`/exercice/addExercice/${user}`, formData);\n      dispatch({\n        type: ADD_EXERCICE,\n        payload: res.data\n      });\n      dispatch(SetAlert('Exercice Created', 'success'));\n    } catch (err) {\n      dispatch({\n        type: EXERCICE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/lenovo/Documents/GitHub/BesTest/BesTest/frontend/src/Actions/Exercice.js"],"names":["axios","SetAlert","GET_EXERCICES","GET_EXERCICE","GET_LESSONS","EXERCICE_ERROR","DELETE_EXERCICE","ADD_EXERCICE","GetExercices","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","GetAllLessons","AddExercices","formData","user","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,aADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,cAJF,EAKEC,eALF,EAMEC,YANF,QAQO,SARP,C,CAUA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,gBAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,cADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAdM;AAgBP,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOX,QAAP,IAAoB;AACrD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,kBAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPS,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZN,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,cADC;AAEPQ,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAdM,C,CAiBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAME,YAAY,GAAG;AAAA,MAAC;AAACC,IAAAA,QAAD;AAAUC,IAAAA;AAAV,GAAD;AAAA,SAAqB,MAAOd,QAAP,IAAoB;AAEnE,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMV,KAAK,CAACwB,IAAN,CAAY,yBAAwBD,IAAK,EAAzC,EAA4CD,QAA5C,CAAlB;AAEAb,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEL,YADC;AAEPM,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAKAL,MAAAA,QAAQ,CAACR,QAAQ,CAAC,kBAAD,EAAqB,SAArB,CAAT,CAAR;AACD,KATD,CASE,OAAOc,GAAP,EAAY;AACZN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAEP,cADC;AAEPQ,QAAAA,OAAO,EAAE;AAAEG,UAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,UAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFF,OAAD,CAAR;AAID;AACF,GAjB2B;AAAA,CAArB","sourcesContent":["import axios from 'axios';\r\nimport { SetAlert } from './Alert';\r\nimport {\r\n  GET_EXERCICES,\r\n  GET_EXERCICE,\r\n  GET_LESSONS,\r\n  EXERCICE_ERROR,\r\n  DELETE_EXERCICE,\r\n  ADD_EXERCICE,\r\n\r\n} from './Types';\r\n\r\n// Get posts\r\nexport const GetExercices = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/exercice/list');\r\n\r\n    dispatch({\r\n      type: GET_EXERCICES,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: EXERCICE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\nexport const GetAllLessons = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get('/exercice/lesson');\r\n\r\n    dispatch({\r\n      type: GET_LESSONS,\r\n      payload: res.data,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: EXERCICE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};\r\n\r\n\r\n// // Delete post\r\n// export const DeleteExercice = (id,idLesson) => async (dispatch) => {\r\n//   try {\r\n//     await axios.delete(/exercice/list/${id}/${idLesson});\r\n\r\n//     dispatch({\r\n//       type: DELETE_EXERCICE,\r\n//       payload: id,\r\n//     });\r\n\r\n//     dispatch(SetAlert('Exercice Removed', 'success'));\r\n//   } catch (err) {\r\n//     dispatch({\r\n//       type: EXERCICE_ERROR,\r\n//       payload: { msg: err.response.statusText, status: err.response.status },\r\n//     });\r\n//   }\r\n// };\r\n\r\n// Add post\r\nexport const AddExercices = ({formData,user}) => async (dispatch) => {\r\n\r\n  try {\r\n    const res = await axios.post(`/exercice/addExercice/${user}`, formData);\r\n\r\n    dispatch({\r\n      type: ADD_EXERCICE,\r\n      payload: res.data,\r\n    });\r\n\r\n    dispatch(SetAlert('Exercice Created', 'success'));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: EXERCICE_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status },\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}